# Settings and configurations that are common for all containers
x-minio-common: &minio-common
  image: quay.io/minio/minio:${MINIO_VERSION}
  command: server --console-address ":9001" http://minio/data{1...2}
  expose:
    - ${MINIO_PORT}
    - "9001"
  environment:
    MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
    MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
  healthcheck:
    test: ["CMD", "mc", "ready", "local"]
    interval: 5s
    timeout: 5s
    retries: 5

services:
  web:
    build:
      context: ./cedars
    image: cedars
    restart: always
    # flask requires SIGINT to stop gracefully
    # (default stop signal from Compose is SIGTERM)
    stop_signal: SIGINT
    depends_on:
      - redis
    networks:
      - cedars
    env_file:
      - .env
    profiles:
      - cpu
      - gpu
      - selfhosted
      - superbio
    deploy:
      resources:
        limits:
          memory: '4g'
          cpus: '4.0'
        reservations:
          memory: '1g'
          cpus: '1.0'
  db:
    image: mongo:latest
    ports:
      - "${DB_HOST_PORT}:${DB_PORT}"
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${DB_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${DB_PWD}
    volumes:
      - cedars_db:/data/db
    command: mongod --quiet --logpath /dev/null 
    networks:
      - cedars
    profiles:
      - selfhosted
      - superbio

  minio:
    <<: *minio-common
    hostname: minio
    restart: always
    ports:
      - "9000:${MINIO_PORT}"
      - "9001:9001"
    volumes:
      - data2-1:/data1
      - data2-2:/data2
    networks:
      - cedars
    profiles:
      - cpu
      - gpu
      - selfhosted
      - superbio

  nginx:
    image: nginx:1.19.2-alpine
    hostname: nginx
    restart: always
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
    depends_on:
      - web
      - minio
    networks:
      - cedars
    profiles:
      - cpu
      - gpu
      - selfhosted
      - superbio

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - cedars
    depends_on:
      - web     
    profiles:
      - cpu
      - gpu
      - selfhosted
      - superbio


  redis:
    build:
        context: ./redis
        dockerfile: Dockerfile
    image: redis:7.2-alpine
    restart: always
    ports:
        - 6379:6379
    # Run the init script
    command: sh -c "./init.sh"
    # Run as privileged to allow the container to change the vm.overcommit_memory setting
    privileged: true
    volumes:
        - redis_data:/redis/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - cedars
    profiles:
      - cpu
      - gpu
      - selfhosted
      - superbio

  worker-task:
    image: cedars
    command: python -m app.make_rq task
    networks:
      - cedars
    env_file:
      - .env
    depends_on:
      - web
      - redis
    profiles:
      - cpu
      - gpu
      - selfhosted   
      - superbio
    deploy:
      resources:
        limits:
          memory: '4g'
          cpus: '1.5'
        reservations:
          memory: '1g'
          cpus: '1.0'
      replicas: ${WORKER_SCALE}
    
  worker-ops:
    image: cedars
    command: python -m app.make_rq ops
    networks:
      - cedars
    env_file:
      - .env
    depends_on:
      - web
      - redis
    profiles:
      - cpu
      - gpu
      - selfhosted
      - superbio
    deploy:
      resources:
        limits:
          memory: '2g'
          cpus: '1.0'
        reservations:
          memory: '1g'
          cpus: '1.0'
      replicas: 1
    
volumes:
  data2-1:
  data2-2:
  cedars_db:
  redis_data:
  prometheus_data:
networks:
  cedars:
    driver: bridge
