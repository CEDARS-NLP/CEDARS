from datetime import datetime
from sqlalchemy import Integer, String, DateTime, Text, Boolean
from sqlalchemy import Column, ForeignKey
from .database import Base

class INFO(Base):
    """
    This is an sqlalchemy class for the info table.
    The info table is used to store meta-data regarding the current CEDARS project.

    Columns:
        project_name (str) : Name of the research project
        investigator_name (str) : Name of the investigator on this project
        cedars_version (str) : Version of CEDARS used for this project
        creation_time (DateTime) : Date and time the project was created
    """


    __tablename__ = "INFO"
    project_name = Column(String, primary_key = True) 
    investigator_name = Column(String)
    cedars_version = Column(String)
    creation_time = Column(DateTime, default = datetime.now)
    
    def __repr__(self):
        '''
        Format used to print the table output to console.
        '''

        return f"""INFO(project_name={self.project_name!r}, investigator_name={self.investigator_name!r},
                        cedars_version={self.cedars_version!r}, creation_time={self.creation_time!r})"""
    
    def get_column_names(self = None):
        return ["project_name", "investigator_name", "cedars_version", "creation_time"]

class PATIENTS(Base):
    """
    This is an sqlalchemy class for the patients table.
    The patients table is used to store the patient ids as well as their current status.
    """

    __tablename__ = "PATIENTS"

    patient_id = Column(Integer, primary_key = True)
    reviewed = Column(Boolean)
    locked = Column(Boolean)
    updated = Column(Boolean)
    admin_locked = Column(Boolean)

    def get_column_names(self = None):
        return ['patient_id', 'reviewed', 'locked', 'updated', 'admin_locked']

class NOTES(Base):
    """
    This is an sqlalchemy class for the notes table.
    The notes table is used to store patient medical records.
    """

    __tablename__ = "NOTES"

    text_id = Column(String, primary_key = True)
    text = Column(Text)
    patient_id = Column(Integer, ForeignKey(PATIENTS.patient_id))
    text_date = Column(DateTime)
    doc_id = Column(String)
    text_sequence = Column(Integer)
    text_tag_1 = Column(String)
    text_tag_2 = Column(String)
    text_tag_3 = Column(String)
    text_tag_4 = Column(String)

    def get_column_names(self = None):
        return ['text_id', 'text', 'patient_id', 'text_date', 'doc_id', 'text_sequence',
                'text_tag_1', 'text_tag_2', 'text_tag_3', 'text_tag_4']



class ANNOTATIONS(Base):
    """
    This is an sqlalchemy class for the annotations table.
    The annotations table is used to store the NLP annotations generated by our NLP model.

    Columns:
        project_name (str) : Name of the research project
        investigator_name (str) : Name of the investigator on this project
        cedars_version (str) : Version of CEDARS used for this project
        creation_time (DateTime) : Date and time the project was created
    """


    __tablename__ = "ANNOTATIONS"
    anno_id = Column(Integer, primary_key = True, autoincrement = True) 
    note_id = Column(Integer, ForeignKey(NOTES.text_id))

    sentence = Column(Text)
    token = Column(String)
    lemma = Column(String)
    isNegated = Column(Boolean)

    start_index = Column(Integer)
    end_index = Column(Integer)
    note_start_index = Column(Integer)
    note_end_index = Column(Integer)
    sentence_number = Column(Integer)
    patient_id = Column(Integer, ForeignKey(PATIENTS.patient_id))

    event_date = Column(DateTime)
    reviewed = Column(Boolean)
    
    def get_column_names(self = None):
        return ['anno_id', 'note_id', 'sentence', 'token', 'lemma', 'isNegated',
                'start_index', 'end_index', 'note_start_index', 'note_end_index', 'sentence_number',
                'patient_id', 'event_date', 'reviewed']



class COMMENTS(Base):
    """
    This is an sqlalchemy class for the comments table.
    The comments table is used to store comments reviewers leave on annotations.
    """

    __tablename__ = "COMMENTS"
    comm_id = Column(Integer, primary_key = True, autoincrement = True) 
    anno_id = Column(Integer, ForeignKey(ANNOTATIONS.anno_id))
    comment = Column(Text)
 
    def get_column_names(self = None):
        return ['comm_id', 'anno_id', 'comment']

class USERS(Base):
    """
    This is an sqlalchemy class for the users table.
    This table is used to store the credentials of users of the CEDARS system.
    """

    __tablename__ = "USERS"

    _id = Column(Integer, primary_key = True, autoincrement = True)
    user = Column(String, unique = True)
    password = Column(String)
    is_admin = Column(Boolean)
    date_created = Column(DateTime, default = datetime.now)

    def get_column_names(self = None):
        return ['_id', 'user', 'password', 'is_admin', 'date_created']
    
class QUERY(Base):
    """
    This is an sqlalchemy class for the query table.
    This table is used to store the regex queries that researchrs are using.
    """

    __tablename__ = "QUERY"

    _id = Column(Integer, primary_key = True, autoincrement = True)
    query = Column(String)
    tag_query_include = Column(String)
    tag_query_exclude = Column(String)
    exclude_negated = Column(Boolean)
    hide_duplicates = Column(Boolean)
    skip_after_event = Column(Boolean)
    tag_query_exact = Column(Boolean)
    tag_query_nlp_apply = Column(Boolean)
    current = Column(Boolean, default = True) # latest inserted query is the current one
    date_min = Column(DateTime, default = None)
    date_max = Column(DateTime, default = None)

    def get_column_names(self = None):
        return ['_id', 'query', 'tag_query_include', 'tag_query_exclude', 'exclude_negated',
                'hide_duplicates', 'skip_after_event', 'tag_query_exact', 'tag_query_nlp_apply',
                'current', 'date_min', 'date_max']