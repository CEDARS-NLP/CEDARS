"""
This file contatins an abstract class for CEDARS to interact with mongodb.
"""

import os
from io import BytesIO, StringIO
import re
from datetime import datetime
from typing import Optional
from uuid import uuid4
from faker import Faker
import flask
from flask import g
import requests
import pandas as pd
from werkzeug.security import check_password_hash
from bson import ObjectId
from loguru import logger

from .database import mongo, minio
from .network_conn import get_pines_url

fake = Faker()


# Create collections and indexes
def create_project(project_name,
                   investigator_name,
                   project_id=str(uuid4()),
                   cedars_version="0.1.0"):
    """
    This function creates all the collections in the mongodb database for CEDARS.

    Args:
        project_name (str) : Name of the research project
        investigator_name (str) : Name of the investigator on this project
        cedars_version (str) : Version of CEDARS used for this project
    Returns:
        None
    """
    if mongo.db["INFO"].find_one() is not None:
        logger.info("Database already created.")
        return

    create_info_col(project_name=project_name,
                    project_id=project_id,
                    investigator_name=investigator_name,
                    cedars_version=cedars_version)

    # populate_annotations()
    # populate_notes()
    populate_users()
    # populate_query()

    logger.info("Database creation successful!")


def create_info_col(project_name, project_id, investigator_name, cedars_version):
    """
    This function creates the info collection in the mongodb database.
    The info collection is used to store meta-data regarding the current project.

    Args:
        project_name (str) : Name of the research project
        investigator_name (str) : Name of the investigator on this project
        cedars_version (str) : Version of CEDARS used for this project
    Returns:
        None
    """
    collection = mongo.db["INFO"]
    info = {"creation_time": datetime.now(),
            "project": project_name,
            "project_id": project_id,
            "investigator": investigator_name,
            "CEDARS_version": cedars_version}

    collection.insert_one(info)
    logger.info("Created INFO collection.")


# def populate_annotations():
#     """
#     This function creates the annotations and patients collections in the mongodb database.
#     The annotations collection is used to store the NLP annotations generated by our NLP model.
#     The patients collection is used to store the patient ids as well as their current status.
#     """
#     annotations = mongo.db["ANNOTATIONS"]

#     # annotations.create_index("patient_id", unique=False)
#     # annotations.create_index("note_id", unique=False)
#     # annotations.create_index("text_id", unique = False)
#     # annotations.create_index("sentence_number", unique=False)
#     # annotations.create_index("start_index", unique=False)

#     logger.info("Created ANNOTATIONS collection.")

#     # This statement is used to create a collection.
#     patients = mongo.db["PATIENTS"]
#     logger.info(f"Created {patients.name} collection.")


# def populate_notes():
#     """
#     This function creates the notes collection in the mongodb database.
#     The notes collection is used to store the patient's medical records.
#     """
#     notes = mongo.db["NOTES"]

#     # notes.create_index("patient_id", unique=False)
#     # notes.create_index("doc_id", unique=False)
#     # notes.create_index("text_id", unique=True)

#     logger.info("Created NOTES collection.")


# def populate_patients():
#     """
#     This function creates the notes collection in the mongodb database.
#     The notes collection is used to store the patient's medical records.
#     """
#     notes = mongo.db["Patients"]

#     # notes.create_index("patient_id", unique=True)

#     logger.info("Created Patients collection.")


def populate_users():
    """
    This function creates the users collection in the mongodb database.
    The users collection is used to store the credentials of users of the CEDARS system.
    """
    users = mongo.db["USERS"]

    users.create_index("user", unique=True)
    logger.info("Created USERS collection.")


# def populate_query():
#     """
#     This function creates the query collection in the mongodb database.
#     The query collection is used to store the regex queries that researchrs are using.
#     """
#     # Pylint disabled for pointless statement.
#     # This statement is used to create a collection.
#     query = mongo.db["QUERY"]
#     logger.info("Created %s collection.", query.name)


def populate_task():
    """
    This database stores tasks in rq
    """
    # Pylint disabled for pointless statement.
    # This statement is used to create a collection.
    task = mongo.db["TASK"]
    # task.create_index("job_id", unique=True)
    logger.info("Created %s collection.", task.name)


# index functions
def create_index(collection, index: list):
    """
    This function is used to create an index in a collection
    Add support for features such as unique=True etc

    Args:
        collection (str) : The name of the collection to create the index in.
        index (str|tuple) : The name of the index to create or a tuple with the name and options.

    """
    for i in index:
        if isinstance(i, tuple):
            mongo.db[collection].create_index(i[0], **i[1])
        else:
            mongo.db[collection].create_index(i)
        logger.info(f"Created index {i} in collection {collection}.")


# Insert functions
def add_user(username, password, is_admin=False):
    """
    This function is used to add a new user to the database.
    All this data is kept in the USERS collection.

    Args:
        username (str) : The name of this user.
        password (str) : The password this user will need to login to the system.
    Returns:
        None
    """
    info = {
        "user": username,
        "password": password,
        "is_admin": is_admin,
        "date_created": datetime.now()
    }
    mongo.db["USERS"].insert_one(info)
    logger.info(f"Added user {username} to database.")


def save_query(query, exclude_negated, hide_duplicates,  # pylint: disable=R0913
               skip_after_event, tag_query, date_min=datetime.now(),
               date_max=datetime.now()):

    """
    This function is used to save a regex query to the database.
    All this data is kept in the QUERY collection.

    Args:
        query (str) : The regex query.
        exclude_negated (bool) : True if we want to exclude negated tokens.
        hide_duplicates (bool) : True if we want to restrict duplicate queries.
        skip_after_event (bool) : True if sentences occurring
                                    after a recorded clinical event are to be skipped.
        tag_query (dict of mapping [str : list]) :
                                    Key words to include or exclude in the search.
        date_min (str) : Smallest date for valid query.
        date_max (str) : Greatest date for valid query.
    Returns:
        Status (bool) : True if the query was saved,
                        False if query same quqery already exists.
    """
    info = {
        "query": query,
        "exclude_negated": exclude_negated,
        "hide_duplicates": hide_duplicates,
        "skip_after_event": skip_after_event,
        "tag_query": tag_query,
        "date_min": date_min,
        "date_max": date_max
    }

    collection = mongo.db["QUERY"]
    # only one query is current at a time.
    # TODO: make a query history and enable multiple queries.
    info["current"] = True

    if (query == get_search_query() and
            skip_after_event == get_search_query("skip_after_event") and
            tag_query.get('nlp_apply', False) == get_search_query("tag_query").get('nlp_apply', False)):
        logger.info(f"Query already saved : {query}.")
        return False

    collection.update_one({"current": True}, {"$set": {"current": False}})
    collection.insert_one(info)

    logger.info(f"Saved query : {query}.")
    return True


def upload_notes(documents):
    """
    This function is used to take a dataframe of patient records
    and save it to the mongodb database.

    Args:
        documents (pandas dataframe) : Dataframe with all the records of a paticular patient.
    Returns:
        None
    """
    notes_collection = mongo.db["NOTES"]
    patient_ids = set()
    for i in range(len(documents)):
        note_info = documents.iloc[i].to_dict()

        date_format = '%Y-%m-%d'
        datetime_obj = datetime.strptime(note_info["text_date"], date_format)
        note_info["text_date"] = datetime_obj
        note_info["reviewed"] = False

        # text_id should be unique
        notes_collection.insert_one(note_info)
        patient_ids.add(note_info["patient_id"])
        if i+1 % 100 == 0:
            logger.info(f"Uploaded {i}/{len(documents)} notes")

    patients_collection = mongo.db["PATIENTS"]
    for p_id in patient_ids:
        patient_info = {"patient_id": p_id,
                        "reviewed": False,
                        "locked": False,
                        "updated": False,
                        "comments": "",
                        "reviewed_by" : "",
                        "event_annotation_id" : None,
                        "event_date" : None,
                        "admin_locked": False}

        if not patients_collection.find_one({"patient_id": p_id}):
            patients_collection.insert_one(patient_info)


def insert_one_annotation(annotation):
    """
    Adds an annotation to the database.

    Args:
        annotation (dict) : The annotation we are inserting
    Returns:
        None
    """
    annotations_collection = mongo.db["ANNOTATIONS"]

    annotations_collection.insert_one(annotation)


# Get functions
def get_user(username):
    """
    This function is used to get a user from the database.

    Args:
        username (str) : The name of the user to get.
    Returns:
        user (dict) : The user object from the database.
    """
    user = mongo.db["USERS"].find_one({"user": username})
    return user


def get_search_query(query_key="query"):
    """
    This function is used to get the current search query from the database.
    All this data is kept in the QUERY collection.
    """
    query = mongo.db["QUERY"].find_one({"current": True})

    if query:
        return query[query_key]

    return ""


def get_search_query_details():
    """
    This function is used to get the current search query details
    from the database.
    """
    query = mongo.db["QUERY"].find_one({"current": True})

    if query:
        query.pop("_id")
        return query

    return {}


def get_info():
    """
    This function returns the info collection in the mongodb database.
    """
    info = mongo.db["INFO"].find_one()

    if info is not None:
        return info

    return {}


def get_all_annotations_for_note(note_id):
    """
    This function is used to get all the annotations for a particular note
    after removing negated annotations.
    Order of annotations -
        text_date (ascending)
        note_start_index (ascending)
    """
    annotations = mongo.db["ANNOTATIONS"].find({"note_id": note_id,
                                                "isNegated": False}).sort([("text_date", 1),
                                                                           ("setence_number", 1)])
    return list(annotations)

def get_all_annotations_for_sentence(note_id, sentence_number):
    """
    This function is used to get all the annotations for a particular sentence
        in a note after removing negated annotations.
    Order of annotations -
        text_date (ascending)
        note_start_index (ascending)
    """
    annotations = mongo.db["ANNOTATIONS"].find({"note_id": note_id,
                                                "sentence_number" : sentence_number,
                                                "isNegated": False}).sort([("text_date", 1),
                                                                           ("note_start_index", 1)])
    return list(annotations)

def get_annotation(annotation_id):
    """
    Retrives annotation from mongodb.

    Args:
        annotation_id (str) : Unique ID for the annotation.
    Returns:
        annotation (dict) : Dictionary for an annotation from mongodb.
            The keys are the attribute names.
            The values are the values of the attribute in that record.
    """
    annotation = mongo.db["ANNOTATIONS"].find_one({"_id": ObjectId(annotation_id)})

    return annotation


def get_annotation_note(annotation_id: str):
    """
    Retrives note linked to a paticular annotation.

    Args:
        annotation_id (str) : Unique ID for the annotation.
    Returns:
        note (dict) : Dictionary for a note from mongodb.
                      The keys are the attribute names.
                      The values are the values of the attribute in that record.
    """
    logger.debug(f"Retriving annotation #{annotation_id} from database.")
    annotation = mongo.db["ANNOTATIONS"].find_one({"_id": ObjectId(annotation_id)})
    if not annotation:
        return None

    note = mongo.db["NOTES"].find_one({"text_id": annotation["note_id"]})

    return note


def get_patient_by_id(patient_id):
    """
    Retrives a single patient from mongodb.

    Args:
        patient_id (int) : Unique ID for a patient.
    Returns:
        patient (dict) : Dictionary for a patient from mongodb.
                         The keys are the attribute names.
                         The values are the values of the attribute in that record.
    """
    logger.debug(f"Retriving patient #{patient_id} from database.")
    patient = mongo.db["PATIENTS"].find_one({"patient_id": patient_id})

    return patient


def get_patient():
    """
    Retrives a single patient ID who has not yet been reviewed and is not currently locked.
    The chosen patient is simply the first one in the database that has not yet been reviewed.

    Args:
        None
    Returns:
        patient_id (int) : Unique ID for a patient.
    """

    # todo: make sure it only get patients who have annotations atleast
    # while adjuticating
    patient = mongo.db["PATIENTS"].find_one({"reviewed": False,
                                             "locked": False})

    if patient is not None and "patient_id" in patient.keys():
        logger.debug(f"Retriving patient #{patient['patient_id']} from database.", )
        return patient["patient_id"]

    logger.info("Failed to retrive any further un-reviewed patients from the database.")
    return None


def get_patients_to_annotate():
    """
    Retrieves a patient that have not been reviewed

    Args:
        None
    Returns:
        patient_to_annotate: A single patient that needs to manually reviewed
    """
    logger.debug("Retriving all un-reviewed patients from database.")

    # check is this patient has any unreviewed annotations
    for patient_id in get_patient_ids():
        annotations = get_patient_annotation_ids(patient_id)
        if len(annotations) > 0:
            return patient_id

        mark_patient_reviewed(patient_id, "CEDARS")

    return None


def get_documents_to_annotate(patient_id=None):
    """
    Retrives all documents that have not been annotated.

    Returns: All matching notes from the database.
    """
    logger.debug("Retriving all annotated documents from database.")
    match_stage = {
        "annotations": {"$eq": []},
        "reviewed": {"$ne": True}
    }
    if patient_id:
        match_stage["patient_id"] = patient_id

    documents_to_annotate = mongo.db["NOTES"].aggregate(
        [{
            "$lookup": {
                "from": "ANNOTATIONS",
                "localField": "text_id",
                "foreignField": "note_id",
                "as": "annotations"
            }
        }, {
            "$match": match_stage
        }])

    return documents_to_annotate


def get_all_annotations_for_patient(patient_id):
    """
    Retrives all annotations for a patient.

    Args:
        patient_id (int) : Unique ID for a patient.
    Returns:
        annotations (list) : A list of all annotations for that patient.
    """
    annotations = list(mongo.db["ANNOTATIONS"]
                       .find({"patient_id": patient_id, "isNegated": False})
                       .sort([("text_date", 1), ("note_id", 1), ("note_start_index", 1)]))

    return annotations


def get_all_annotations_for_patient_paged(patient_id, page=1, page_size=1):
    """
    Retrives all annotations for a patient.

    Args:
        patient_id (int) : Unique ID for a patient.
    Returns:
        annotations (list) : A list of all annotations for that patient.
    """
    annotations = mongo.db["ANNOTATIONS"].aggregate([
        {
            "$match": {"patient_id": patient_id}
        },
        {
            "$facet": {
                "metadata": [{"$count": 'total'}],
                "data": [
                    {"$match": {"patient_id": patient_id}},
                    {"$sort": {"text_date": 1, "note_id": 1, "note_start_index": 1}},
                    {"$skip": (page - 1) * page_size},
                    {"$limit": page_size}]
                }
        },
        {
            "$project": {
                "total": {"$arrayElemAt": ["$metadata.total", 0]},
                "annotations": "$data"
            }
        }
    ])

    result = list(annotations)

    if result:
        # Extract the document
        data = result[0]
        total = data.get("total", 0)  # Total number of annotations
        annotations = data.get("annotations", [])  # Annotations for the current page
    else:
        # If no results, set default values
        total = 0
        annotations = []

    # Return the total count and the current page of annotations
    return {"total": total, "annotations": annotations}


def get_patient_annotation_ids(p_id, reviewed=False, key="_id"):
    """
    Retrives all annotation IDs for annotations linked to a patient.

    Args:
        p_id (int) : Unique ID for a patient.
        reviewed (bool) : True if we want to get reviewed annotations.
    Returns:
        annotations (list) : A list of all annotation IDs linked to that patient.
    """
    logger.debug(f"Retriving annotations for patient #{p_id} from database.")
    query_filter = {"patient_id": p_id, "isNegated": False, "reviewed": reviewed}

    annotation_ids = mongo.db["ANNOTATIONS"].find(
        query_filter).sort([
            ("note_id", 1),
            ('text_date', 1),
            ("sentence_number", 1)])

    res = []
    if key == "sentence":
        for _id in annotation_ids:
            cleaned_sentence = ' '.join(_id[key].split())
            res.append(f'{_id["note_id"]}:{str(_id["text_date"])[:10]}:{cleaned_sentence}')
    else:
        res = [str(_id[key]) for _id in annotation_ids]

    return res

def get_event_date(patient_id):
    """
    Find the event date for a patient.
    """
    logger.debug(f"Retriving event date for patient #{patient_id}.")
    patient = mongo.db["PATIENTS"].find_one({"patient_id": patient_id})

    if patient and patient['event_date'] is not None:
        #date_format = '%Y-%m-%d'
        #event_date = datetime.strptime(patient['event_date'], date_format)
        return patient['event_date']

    return None


def get_event_date_sentences(patient_id):
    """
    Find the event date from the annotations for a patient.
    """
    logger.debug(f"Retriving event date for patient #{patient_id}.")
    event_date = get_event_date(patient_id)
    if event_date is None:
        return []
    annotations = mongo.db["ANNOTATIONS"].find({
        "patient_id": patient_id}).sort(
                [("text_date", 1)]
                )
    annotations = list(annotations)
    res = []
    if len(annotations) > 0:
        res = [f'{annotation["note_id"]}: {annotation["sentence"]}' for annotation in annotations]
    return res


def get_note_date(note_id):
    """
    Retrives the date of a note.

    Args:
        note_id (str) : Unique ID for a note.
    Returns:
        note_date (datetime) : The date of the note.
    """
    logger.debug(f"Retriving date for note #{note_id}.")
    note = mongo.db["NOTES"].find_one({"text_id": note_id})
    return note["text_date"]


def get_first_note_date_for_patient(patient_id):
    """
    Retrives the date of the first note for a patient.

    Args:
        patient_id (int) : Unique ID for a patient.
    Returns:
        note_date (datetime) : The date of the first note for the patient.
    """
    logger.debug(f"Retriving first note date for patient #{patient_id}.")
    note = mongo.db["NOTES"].find_one({"patient_id": patient_id},
                                      sort=[("text_date", 1)])

    if not note:
        return None
    return note["text_date"]


def get_last_note_date_for_patient(patient_id):
    """
    Retrives the date of the last note for a patient.

    Args:
        patient_id (int) : Unique ID for a patient.
    Returns:
        note_date (datetime) : The date of the last note for the patient.
    """
    logger.debug(f"Retriving last note date for patient #{patient_id}.")
    note = mongo.db["NOTES"].find_one({"patient_id": patient_id},
                                      sort=[("text_date", -1)])

    if not note:
        return None
    return note["text_date"]


def get_all_annotations():
    """
    Returns a list of all annotations from the database.

    Args:
        None
    Returns:
        Annotations (list) : This is a list of all annotations from the database.
    """
    annotations = mongo.db["ANNOTATIONS"].find()

    return list(annotations)


def get_proj_name():
    """
    Returns the name of the current project.

    Args:
        None
    Returns:
        proj_name (str) : The name of the current CEDARS project.
    """

    proj_info = mongo.db["INFO"].find_one()
    if proj_info is None:
        return None
    proj_name = proj_info["project"]
    return proj_name


def get_curr_version():
    """
    Returns the name of the current project.

    Args:
        None
    Returns:
        proj_name (str) : The name of the current CEDARS project.
    """

    proj_info = mongo.db["INFO"].find_one()

    return proj_info["CEDARS_version"]


def get_project_users():
    """
    Returns all the usernames for approved users (including the admin) for this project

    Args:
        None
    Returns:
        usernames (list) : List of all usernames for approved users
                           (including the admin) for this project
    """
    users = mongo.db["USERS"].find({})

    return [user["user"] for user in users]


def get_all_patients():
    """
    Returns all the patients in this project

    Args:
        None
    Returns:
        patients (list) : List of all patients in this project
    """
    patients = mongo.db["PATIENTS"].find()

    return list(patients)


def get_patient_ids():
    """
    Returns all the patient IDs in this project

    Args:
        None
    Returns:
        patient_ids (list) : List of all patient IDs in this project
    """
    patients = mongo.db["PATIENTS"].find({"reviewed": False, "locked": False})
    res = [patient["patient_id"] for patient in patients]
    logger.info(f"Retrived {len(res)} patient IDs from the database.")
    return res


def get_patient_lock_status(patient_id):
    """
    Updates the status of the patient to be locked or unlocked.

    Args:
        patient_id (int) : ID for the patient we are locking / unlocking
    Returns:
        status (bool) : True if the patient is locked, False otherwise.
            If no such patient is found, we return None.

    Raises:
        None
    """
    patient_id = int(patient_id)
    patient = mongo.db["PATIENTS"].find_one({"patient_id": patient_id})
    return patient["locked"]


def get_all_notes(patient_id):
    """
    Returns all notes for that patient.
    """
    notes = mongo.db["NOTES"].find({"patient_id": patient_id})
    return list(notes)


def get_patient_notes(patient_id, reviewed=False):
    """
    Returns all notes for that patient.

    Args:
        patient_id (int) : ID for the patient
    Returns:
        notes: A list of all notes for that patient
    """
    mongodb_search_query = {"patient_id": patient_id, "reviewed": reviewed}
    notes = mongo.db["NOTES"].find(mongodb_search_query)
    return notes


def get_total_counts(collection_name: str, **kwargs) -> int:
    """
    Returns the total number of documents in a collection.

    Args:
        collection_name (str) : The name of the collection to search.
        **kwargs : Additional arguments to pass to the find
    Returns:
        count (int) : The number of documents in the collection.
    """
    return mongo.db[collection_name].count_documents({**kwargs})


def get_annotated_notes_for_patient(patient_id: int) -> list[str]:
    """
    For a given patient, list all note_ids which have matching keyword
    annotations

    Args:
        patient_id (int) : The patient_id for which we want to retrieve the
            annotated notes

    Returns:
        notes (list[str]) : List of note_ids for the patient which have
            matching keyword annotations
    """
    annotations = (mongo.db["ANNOTATIONS"]
                   .find({"patient_id": patient_id})
                   .sort([("text_date", 1), ("note_id", 1), ("note_start_index", 1)]))
    notes = []
    for annotation in annotations:
        notes.append(annotation["note_id"])

    return list(dict.fromkeys(notes))


# update functions
def update_project_name(new_name):
    """
    Updates the project name in the INFO collection of the database.

    Args:
        new_name (str) : New name of the project.
    Returns:
        None
    """
    logger.info(f"Updating project name to #{new_name}")
    mongo.db["INFO"].update_one({}, {"$set": {"project": new_name}})


def mark_annotation_reviewed(annotation_id):
    """
    Updates the annotation in the database to mark it as reviewed.

    Args:
        annotation_id (str) : Unique ID for the annotation.
    Returns:
        None
    """
    logger.debug(f"Marking annotation #{annotation_id} as reviewed.")
    mongo.db["ANNOTATIONS"].update_one({"_id": ObjectId(annotation_id)},
                                       {"$set": {"reviewed": True}})


def update_event_date(patient_id, new_date, annotation_id):
    """
    Enters a new event date for an patient.

    Args:
        patient_id (str) : Unique ID for the patient.
        new_date (str) : The new value to update the event date of the patient with.
            Must be in the format YYYY-MM-DD.
        annotation_id (str) : ID for the annotation at which the new_date was marked.
    Returns:
        None
    """
    # TODO: UTC dates
    logger.debug(f"Updating date on patient #{patient_id} to {new_date}.")
    date_format = '%Y-%m-%d'
    datetime_obj = datetime.strptime(new_date, date_format)

    mongo.db["PATIENTS"].update_one({"patient_id": patient_id},
                                       {"$set": {"event_date": datetime_obj}})

    update_event_annotation_id(patient_id, annotation_id)


def delete_event_date(patient_id):
    """
    Deletes the event date for a patient.

    Args:
        patient_id (str) : Unique ID for the patient.
    Returns:
        None
    """
    logger.debug(f"Deleting date on patient #{patient_id}.")

    mongo.db["PATIENTS"].update_one({"patient_id": patient_id},
                                       {"$set": {"event_date": None}})
    delete_event_annotation_id(patient_id)


def get_event_annotation_id(patient_id):
    """
    Retrives the ID for the annotation where 
            the event date for a patient was found.

    Args:
        patient_id (str) : Unique ID for the patient.
    Returns:
        None
    """
    logger.debug(f"Retriving event_annotation_id for patient #{patient_id}.")

    patient = mongo.db["PATIENTS"].find_one({"patient_id": patient_id})

    return patient["event_annotation_id"]

def update_event_annotation_id(patient_id, annotation_id):
    """
    Updates the ID for the annotation where 
            the event date for a patient was found.

    Args:
        patient_id (str) : Unique ID for the patient.
        annotation_id (str) : ID of the annotation where the
            event date for this patient was entered.
    Returns:
        None
    """
    logger.debug(f"Updating event_annotation_id on patient #{patient_id}.")

    mongo.db["PATIENTS"].update_one({"patient_id": patient_id},
                                       {"$set": {"event_annotation_id": annotation_id}})

def delete_event_annotation_id(patient_id):
    """
    Deletes the ID for the annotation where 
            the event date for a patient was found.

    Args:
        patient_id (str) : Unique ID for the patient.
    Returns:
        None
    """
    logger.debug(f"Deleting event_annotation_id on patient #{patient_id}.")

    mongo.db["PATIENTS"].update_one({"patient_id": patient_id},
                                       {"$set": {"event_annotation_id": None}})


def mark_patient_reviewed(patient_id, reviewed_by: str, is_reviewed=True):
    """
    Updates the patient's status to reviewed in the database.

    Args:
        patient_id (int) : Unique ID for a patient.
        reviewed_by (str) : The name of the user who reviewed the patient.
        is_reviewed (bool) : True if patient's annotations have been reviewed.
    Returns:
        None
    """
    logger.debug(f"Marking patient #{patient_id} as reviewed.")
    mongo.db["PATIENTS"].update_one({"patient_id": patient_id},
                                    {"$set": {"reviewed": is_reviewed,
                                              "reviewed_by": reviewed_by}})


def mark_note_reviewed(note_id, reviewed_by: str):
    """
    Updates the note's status to reviewed in the database.
    """
    logger.debug(f"Marking note #{note_id} as reviewed.")
    mongo.db["NOTES"].update_one({"text_id": note_id},
                                 {"$set": {"reviewed": True,
                                           "reviewed_by": reviewed_by}})


def reset_patient_reviewed():
    """
    Update all patients, notes to be un-reviewed.
    """
    mongo.db["PATIENTS"].update_many({},
                                     {"$set": {"reviewed": False,
                                               "reviewed_by": "",
                                               "comments": ""}})
    mongo.db["NOTES"].update_many({}, {"$set": {"reviewed": False,
                                                "reviewed_by": ""}})


def add_comment(annotation_id, comment):
    """
    Stores a new comment for a patient.

    Args:
        annotation_id (str) : Unique ID for the annotation.
        comment (str) : Text of the comment on this annotation.
    Returns:
        None
    """
    comment = comment.strip()
    if len(comment) == 0:
        logger.info(f"Comment deleted on annotation # {annotation_id}.")
    else:
        logger.debug(f"Adding comment to annotation #{annotation_id}")
    patient_id = mongo.db["ANNOTATIONS"].find_one(
        {"_id": ObjectId(annotation_id)})["patient_id"]

    mongo.db["PATIENTS"].update_one({"patient_id": patient_id},
                                    {"$set":
                                     {"comments": comment}
                                     })


def set_patient_lock_status(patient_id, status):
    """
    Updates the status of the patient to be locked or unlocked.

    Args:
        patient_id (int) : ID for the patient we are locking / unlocking
        status (bool) : True if the patient is being locked, False otherwise.

    Returns:
        None
    """
    patients_collection = mongo.db["PATIENTS"]
    patients_collection.update_one({"patient_id": patient_id},
                                   {"$set": {"locked": status}})


def remove_all_locked():
    """
    Sets the locked status of all patients to False.
    This is done when the server is shutting down.
    """
    patients_collection = mongo.db["PATIENTS"]
    patients_collection.update_many({},
                                    {"$set": {"locked": False}})


def update_annotation_reviewed(note_id: str) -> int:
    """
    Mark all annotations for a note as reviewed.

    Args:
        note_id (str) : The note_id for which we want to mark all annotations as reviewed.
    Returns:
        count (int) : The number of annotations that were marked as reviewed.
    """
    annotations_collection = mongo.db["ANNOTATIONS"]
    result = annotations_collection.update_many({"note_id": note_id},
                                                {"$set": {"reviewed": True}})
    return result.modified_count


# delete functions
def empty_annotations():
    """
    Deletes all annotations from the database
    """

    logger.info("Deleting all data in annotations collection.")
    annotations = mongo.db["ANNOTATIONS"]
    annotations.delete_many({})

    # also reset the queue
    flask.current_app.task_queue.empty()
    mongo.db["TASK"].delete_many({})


def drop_database(name):
    """Clean Database"""
    mongo.cx.drop_database(name)


# utility functions
def check_password(username, password):
    """
    Checks if the password matches the password of that user from the database.

    Args:
        username (str) : The name of the new user
        password (str) : The password entered by the user.

    Returns:
        (bool) : True if the password matches the password of that user from the database.
    """

    user = mongo.db["USERS"].find_one({"user": username})

    return "password" in user and check_password_hash(user["password"], password)


def is_admin_user(username):
    """check if the user is admin"""
    user = mongo.db["USERS"].find_one({'user': username})

    if user is not None and user["is_admin"]:
        return True

    return False


# stats functions
def get_curr_stats():
    """
    Returns basic statistics for the project

    """
    stats = {}
    # Aggregation pipeline to count unique patients
    pipeline_unique_patients = [
        {"$group": {"_id": "$patient_id"}}
    ]
    unique_patients = list(mongo.db.PATIENTS.aggregate(pipeline_unique_patients))
    stats["number_of_patients"] = len(unique_patients)

    pipeline_annotated_patients = [
        {"$match": {"isNegated": False}},
        {"$group": {"_id": "$patient_id"}}
    ]
    annotated_patients = list(mongo.db.ANNOTATIONS.aggregate(pipeline_annotated_patients))
    stats["number_of_annotated_patients"] = len(annotated_patients)

    # Aggregation pipeline to count reviewed annotations
    pipeline_reviewed = [
        {"$match": {"reviewed": True}},
        {"$group": {"_id": "$patient_id"}}
    ]
    reviewed_annotations = list(mongo.db.PATIENTS.aggregate(pipeline_reviewed))
    stats["number_of_reviewed"] = len(reviewed_annotations)

    # pipeline for notes and reviewed by user for notes with reviewed_by field
    pipeline_patients = [
        {"$match": {"reviewed": True}},
        {"$group": {"_id": "$reviewed_by", "count": {"$sum": 1}}}
    ]

    reviewed_notes = list(mongo.db.PATIENTS.aggregate(pipeline_patients))
    stats["user_review_stats"] = {doc["_id"]: doc["count"] for doc in reviewed_notes}
    # Aggregation pipeline for lemma distribution
    pipeline_lemma_dist = [
        {"$match": {"isNegated": False}},
        {"$group": {"_id": "$token", "count": {"$sum": 1}}},
        {"$sort": {"count": -1}},
        {"$limit": 10},
        {"$project": {"token": "$_id", "_id": 0, "count": 1}}
    ]
    lemma_dist_results = mongo.db.ANNOTATIONS.aggregate(pipeline_lemma_dist)
    total_tokens = mongo.db.ANNOTATIONS.count_documents({"isNegated": False})
    stats['lemma_dist'] = {doc['token']: 100 * doc['count']/total_tokens for doc in lemma_dist_results}

    return stats


# pines functions
def get_prediction(note: str) -> float:
    """
    ##### PINES predictions

    Get prediction from endpoint. Text goes in the POST request.
    """

    host = "ec2-15-206-209-23.ap-south-1.compute.amazonaws.com"
    port=12345

    #pines_api_url = os.getenv("PINES_API_URL")
    logger.info(f"Waiting for pines url from {host}:{port}.")
    pines_api_url = get_pines_url(host, port)
    logger.info(f"\n\nRecived url : {pines_api_url} for pines from {host}")
    url = f'{pines_api_url}/predict'
    data = {'text': note}
    log_notes = None
    try:
        response = requests.post(url, json=data, timeout=3600)
        response.raise_for_status()
        res = response.json()["prediction"]
        score = res.get("score")
        label = res.get("label")
        if isinstance(label, str):
            score = 1 - score if "0" in label else score
        else:
            score = 1 - score if label == 0 else score
        log_notes = re.sub(r'\d', '*', note[:20])
        logger.debug(f"Got prediction for note: {log_notes} with score: {score} and label: {label}")
        return score
    except requests.exceptions.RequestException as e:
        logger.error(f"Failed to get prediction for note: {log_notes}")
        raise e


def get_max_prediction_score(patient_id):
    """
    Get the max predicted note score for a patient
    """
    return mongo.db.PINES.aggregate(
        [
            {
                '$match': {
                    'patient_id': patient_id
                }
            }, {
                '$group': {
                    '_id': '$patient_id',
                    'max_score': {
                        '$max': '$predicted_score'
                    }
                }
            }, {
                '$lookup': {
                    'from': 'PINES',
                    'let': {
                        'patient_id': '$_id',
                        'max_score': '$max_score'
                    },
                    'pipeline': [
                        {
                            '$match': {
                                '$expr': {
                                    '$and': [
                                        {
                                            '$eq': [
                                                '$patient_id', '$$patient_id'
                                            ]
                                        }, {
                                            '$eq': [
                                                '$predicted_score', '$$max_score'
                                            ]
                                        }
                                    ]
                                }
                            }
                        }, {
                            '$project': {
                                'text_id': 1,
                                '_id': 0
                            }
                        }
                    ],
                    'as': 'max_score_texts'
                }
            }, {
                '$addFields': {
                    'text_id': {
                        '$arrayElemAt': [
                            '$max_score_texts.text_id', 0
                        ]
                    }
                }
            }, {
                '$project': {
                    '_id': 1,
                    'max_score': 1,
                    'text_id': 1
                }
            }
        ]
    )


def get_note_prediction_from_db(note_id: str,
                                pines_collection_name: str = "PINES") -> Optional[float]:
    """
    Retrieve the prediction score for a given from the database

    Args:
        pines_collection_name (str): The name of the collection in the database
        note_id (str): The note_id for which we want to retrieve the prediction

    Returns:
        float: The prediction score for the note
    """
    pines_collection = mongo.db[pines_collection_name]
    query = {"text_id": note_id}

    pines_pred = pines_collection.find_one(query)
    if pines_pred:
        logger.debug(f"Found prediction in db for : {note_id}: {pines_pred.get('predicted_score')}")
        return round(pines_pred.get("predicted_score"), 2)
    logger.debug(f"Prediction not found in db for : {note_id}")
    return None


def predict_and_save(text_ids: Optional[list[str]] = None,
                     note_collection_name: str = "NOTES",
                     pines_collection_name: str = "PINES",
                     force_update: bool = False) -> None:
    """
    ##### Save PINES predictions

    Predict and save the predictions for the given text_ids.
    """
    notes_collection = mongo.db[note_collection_name]
    pines_collection = mongo.db[pines_collection_name]
    query = {}
    if text_ids is not None:
        query = {"text_id": {"$in": text_ids}}

    cedars_notes = notes_collection.find(query)
    count = 0
    for note in cedars_notes:
        note_id = note.get("text_id")
        if force_update or get_note_prediction_from_db(note_id, pines_collection_name) is None:
            logger.info(f"Predicting for note: {note_id}")
            prediction = get_prediction(note.get("text"))
            pines_collection.insert_one({
                "text_id": note_id,
                "text": note.get("text"),
                "patient_id": note.get("patient_id"),
                "predicted_score": prediction,
                "report_type": note.get("text_tag_3"),
                "document_type": note.get("text_tag_1")
                })
        count += 1


def add_task(task):
    """
    Launch a task and add it to Mongo if it doesn't already exist.
    # TODO: insert only one
    """
    task_db = mongo.db["TASK"]
    task_db.insert_one(task)


def get_tasks_in_progress():
    """
    Returns tasks that have not been completed yet.
    """
    task_db = mongo.db["TASK"]
    return task_db.find({"complete": False})


def get_task_in_progress(task_id):
    """
    Returns the task with this ID, if it has not been completed.
    """
    task_db = mongo.db["TASK"]
    return task_db.find_one({"job_id": task_id,
                             "complete": False})


def get_task(task_id):
    """
    Returns the task with this ID, regardless of it's completion status.
    """
    task_db = mongo.db["TASK"]
    return task_db.find_one({"job_id": task_id})


def update_db_task_progress(task_id, progress):
    """
    Updates the progress of a task and checks if it has completed.
    This function will also automatically unlock the patient after completion.
    """
    task_db = mongo.db["TASK"]
    task = task_db.find_one({"job_id": task_id})
    completed = False
    if progress >= 100:
        completed = True
    task_db.update_one({"job_id": task["job_id"]},
                       {"$set": {"progress": progress,
                                 "complete": completed}})
    patient_id = int(task_id.split(":")[1])
    # TODO: handle failed patients?
    set_patient_lock_status(patient_id, False)


def report_success(job, connection, result, *args, **kwargs):
    """
    Saves the data associated with a successful job after completion.
    """
    job.meta['progress'] = 100
    job.save_meta()
    update_db_task_progress(job.get_id(), 100)


def report_failure(job, connection, type, value, *args, **kwargs):
    """
    Saves the data associated with a job that failed to complete.
    """
    job.meta['progress'] = 0
    job.save_meta()
    update_db_task_progress(job.get_id(), 0)

def get_patient_reviewer(patient_id):
    """
    Updates the note's status to reviewed in the database.
    """

    reviewed_by = mongo.db["PATIENTS"].find_one({"patient_id": patient_id})["reviewed_by"]
    if reviewed_by.strip() == "":
        return None

    return reviewed_by

def download_annotations(filename: str = "annotations.csv", get_sentences: bool = False) -> bool:
    """
    Download annotations from the database and stream them to MinIO.
    """
    def data_generator():
        patients = get_all_patients()
        for patient in patients:
            patient_id = patient["patient_id"]
            notes = get_all_notes(patient_id)
            reviewed_notes = [note for note in get_patient_notes(patient_id, reviewed=True)]
            note_details = []
            reviewer = get_patient_reviewer(patient_id)
            for note in notes:
                note_id = note["text_id"]
                note_date = str(note["text_date"])[:10]
                predicted_score = get_note_prediction_from_db(note_id)
                if predicted_score is not None:
                    note_details.append(f"{note_id}:{note_date}:{predicted_score}")
            all_note_details = "\n".join(note_details)

            if get_sentences:
                reviewed_sentences = get_patient_annotation_ids(patient_id,
                                                                reviewed=True,
                                                                key="sentence")
                unreviewed_sentences = get_patient_annotation_ids(patient_id,
                                                                  reviewed=False,
                                                                  key="sentence")
                sentences_to_show = reviewed_sentences + unreviewed_sentences
            else:
                reviewed_sentences = get_patient_annotation_ids(patient_id, reviewed=True)
                unreviewed_sentences = get_patient_annotation_ids(patient_id, reviewed=False)
                key_annotation_id = get_event_annotation_id(patient_id)
                if key_annotation_id is not None:
                    key_annotation = get_annotation(key_annotation_id)
                    sentences_to_show = [key_annotation["sentence"]]
                else:
                    sentences_to_show = [""]

            sentences = reviewed_sentences + unreviewed_sentences
            total_sentences = len(sentences)
            event_date = get_event_date(patient_id)
            first_note_date = get_first_note_date_for_patient(patient_id)
            last_note_date = get_last_note_date_for_patient(patient_id)
            max_score = None
            max_score_note_id = None
            max_score_note_date = None
            comments = patient.get("comments", "")
            try:
                res = list(get_max_prediction_score(patient_id))
                if len(res) > 0:
                    res = res[0]
                    max_score = res["max_score"]
                    max_score_note_id = res["text_id"]
                    max_score_note_date = get_note_date(max_score_note_id)

            except Exception:
                logger.info(f"PINES results not available for patient: {patient_id}")



            yield [patient_id, len(notes), len(reviewed_notes), total_sentences,
                   len(reviewed_sentences), "\n".join(sentences_to_show), event_date,
                   first_note_date, last_note_date, max_score_note_id, max_score_note_date,
                   max_score, comments, all_note_details, reviewer]

    column_names = ["patient_id", "total_notes", "reviewed_notes", "total_sentences",
                    "reviewed_sentences", "sentences", "event_date", "first_note_date",
                    "last_note_date", "max_score_note_id",
                    "max_score_note_date", "max_score", "comments",
                    "predicted_notes", "reviewer"]

    try:
        # Create an in-memory buffer for the CSV data
        csv_buffer = StringIO()
        writer = pd.DataFrame(columns=column_names)
        writer.to_csv(csv_buffer, index=False, header=True)

        # Write data in chunks and stream to MinIO
        for chunk in pd.DataFrame(data_generator(), columns=column_names).to_csv(header=False,
                                                                                 index=False,
                                                                                 chunksize=1000):
            csv_buffer.write(chunk)

        # Move the cursor to the beginning of the buffer
        csv_buffer.seek(0)
        data_bytes = csv_buffer.getvalue().encode('utf-8')
        data_stream = BytesIO(data_bytes)

        # Upload to MinIO
        minio.put_object(g.bucket_name,
                         f"annotated_files/{filename}",
                         data_stream,
                         length=len(data_bytes),
                         content_type="application/csv")
        logger.info(f"Uploaded annotations to s3: {filename}")
        return True
    except Exception as e:
        logger.error(f"Failed to upload annotations to s3: {filename}, error: {str(e)}")
        return False


def terminate_project():
    """
    ##### Terminate the Project

    Reset the database to the initial state.
    """
    logger.info("Terminating project.")
    # Delete all mongo DB collections
    mongo.db.drop_collection("ANNOTATIONS")
    mongo.db.drop_collection("NOTES")
    mongo.db.drop_collection("PATIENTS")
    mongo.db.drop_collection("USERS")
    mongo.db.drop_collection("QUERY")
    mongo.db.drop_collection("PINES")
    mongo.db.drop_collection("TASK")

    create_project(project_name=fake.slug(),
                   investigator_name=fake.name())
